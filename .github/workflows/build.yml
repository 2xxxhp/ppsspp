name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Build Windows
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:TrackFileAccess=false /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} Windows/PPSSPP.sln

    - name: Package build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        mkdir ppsspp
        cp PPSSPP*.exe ppsspp/
        cp *.pdb ppsspp/
        cp Windows/*.bat ppsspp/
        cp -r assets ppsspp/assets

    - name: Package headless (x86_64)
      if: env.BUILD_PLATFORM == 'x64'
      run: cp Windows/x64/Release/*.exe ppsspp/

    - name: Package headless (x86_32)
      if: env.BUILD_PLATFORM != 'x64'
      run: cp Windows/Release/*.exe ppsspp/

    - name: Upload build
      uses: actions/upload-artifact@v1
      with:
        name: Windows x64 release
        path: ppsspp/

  build-uwp:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Build UWP
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:TrackFileAccess=false /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} /p:AppxPackageSigningEnabled=false UWP/PPSSPP_UWP.sln

  test-windows:
    runs-on: windows-latest
    needs: build-windows
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: false

    - name: Fetch tests
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Doing this to avoid ffmpeg and other large submodules.
      run: git submodule update --init pspautotests assets/lang

    - name: Download build
      uses: actions/download-artifact@v2
      with:
        name: Windows x64 release
        path: ppsspp/

    - name: Execute tests
      run: python test.py --graphics=software

  build-cmake:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          args: ./b.sh --headless
          cc: gcc
          cxx: g++
        - os: ubuntu-latest
          cc: clang
          cxx: clang++
          args: ./b.sh --headless

        - os: ubuntu-latest
          cc: clang
          cxx: clang++
          android: true
          args: ./android/ab.sh -j2 APP_ABI=arm64-v8a
        - os: ubuntu-latest
          cc: clang
          cxx: clang++
          android: true
          args: ./android/ab.sh -j2 APP_ABI=armeabi-v7a
        - os: ubuntu-latest
          cc: clang
          cxx: clang++
          android: true
          args: ./android/ab.sh -j2 APP_ABI=x86
        - os: ubuntu-latest
          cc: clang
          cxx: clang++
          android: true
          args: ./android/ab.sh -j2 APP_ABI=x86_64
        - os: ubuntu-latest
          cc: clang
          cxx: clang++
          android: true
          args: ./b.sh --libretro_android ppsspp_libretro

        - os: ubuntu-latest
          cc: gcc
          cxx: g++
          args: ./b.sh --qt
          qt: true
        - os: ubuntu-latest
          cc: gcc
          cxx: g++
          args: ./b.sh --libretro
        - os: ubuntu-latest
          cc: clang
          cxx: clang++
          args: ./b.sh --libretro

        - os: macos-latest
          cc: clang
          cxx: clang++
          args: ./b.sh --headless
        - os: macos-latest
          cc: clang
          cxx: clang++
          args: ./b.sh --ios

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      if: ${{matrix.qt}} == 'true'

    - name: Execute build
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: ${{matrix.args}}
